/*-
 * ========================LICENSE_START=================================
 * Api CMP
 * %%
 * Copyright (C) 2022 CSI Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2022 | CSI Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * Beehive API
 * Beehive API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nivola.engineering@csi.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.nivola.nivolasp.integration.rest.model.service;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;

/**
 * DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs
 */

public class DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs {
  @JsonProperty("charset")
  private String charset = null;

  @JsonProperty("collation")
  private String collation = null;

  @JsonProperty("db_name")
  private String dbName = null;

  public DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs charset(String charset) {
    this.charset = charset;
    return this;
  }

   /**
   * The database or schema charset
   * @return charset
  **/
  @ApiModelProperty(required = true, value = "The database or schema charset")
  public String getCharset() {
    return charset;
  }

  public void setCharset(String charset) {
    this.charset = charset;
  }

  public DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs collation(String collation) {
    this.collation = collation;
    return this;
  }

   /**
   * The database or schema collation
   * @return collation
  **/
  @ApiModelProperty(required = true, value = "The database or schema collation")
  public String getCollation() {
    return collation;
  }

  public void setCollation(String collation) {
    this.collation = collation;
  }

  public DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs dbName(String dbName) {
    this.dbName = dbName;
    return this;
  }

   /**
   * The database or schema name
   * @return dbName
  **/
  @ApiModelProperty(required = true, value = "The database or schema name")
  public String getDbName() {
    return dbName;
  }

  public void setDbName(String dbName) {
    this.dbName = dbName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs describeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs = (DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs) o;
    return Objects.equals(this.charset, describeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs.charset) &&
        Objects.equals(this.collation, describeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs.collation) &&
        Objects.equals(this.dbName, describeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs.dbName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charset, collation, dbName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDBInstanceSchemaApiV2ResponseSchemaDescribeDBInstanceSchemaResponseDescribeDBInstanceSchemaResultDbs {\n");
    
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    collation: ").append(toIndentedString(collation)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

