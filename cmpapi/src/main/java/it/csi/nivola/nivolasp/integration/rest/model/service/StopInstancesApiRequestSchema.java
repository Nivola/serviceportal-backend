/*-
 * ========================LICENSE_START=================================
 * Api CMP
 * %%
 * Copyright (C) 2022 CSI Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2022 | CSI Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * Beehive API
 * Beehive API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nivola.engineering@csi.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.nivola.nivolasp.integration.rest.model.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;

/**
 * StopInstancesApiRequestSchema
 */

public class StopInstancesApiRequestSchema {
  @JsonProperty("Force")
  private Boolean force = false;

  @JsonProperty("Hibernate")
  private Boolean hibernate = false;

  @JsonProperty("InstanceId.N")
  private List<String> instanceIdDotN = new ArrayList<>();

  @JsonProperty("Schedule")
  private Object schedule = null;

  @JsonProperty("owner-id.N")
  private List<String> ownerIdN = null;

  public StopInstancesApiRequestSchema force(Boolean force) {
    this.force = force;
    return this;
  }

   /**
   * Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
   * @return force
  **/
  @ApiModelProperty(value = "Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.")
  public Boolean isForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }

  public StopInstancesApiRequestSchema hibernate(Boolean hibernate) {
    this.hibernate = hibernate;
    return this;
  }

   /**
   * Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs.
   * @return hibernate
  **/
  @ApiModelProperty(value = "Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs.")
  public Boolean isHibernate() {
    return hibernate;
  }

  public void setHibernate(Boolean hibernate) {
    this.hibernate = hibernate;
  }

  public StopInstancesApiRequestSchema instanceIdDotN(List<String> instanceIdDotN) {
    this.instanceIdDotN = instanceIdDotN;
    return this;
  }

  public StopInstancesApiRequestSchema addInstanceIdDotNItem(String instanceIdDotNItem) {
    this.instanceIdDotN.add(instanceIdDotNItem);
    return this;
  }

   /**
   * instance id list
   * @return instanceIdDotN
  **/
  @ApiModelProperty(required = true, value = "instance id list")
  public List<String> getInstanceIdDotN() {
    return instanceIdDotN;
  }

  public void setInstanceIdDotN(List<String> instanceIdDotN) {
    this.instanceIdDotN = instanceIdDotN;
  }

  public StopInstancesApiRequestSchema schedule(Object schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * schedule to use when you want to run a scheduled action
   * @return schedule
  **/
  @ApiModelProperty(value = "schedule to use when you want to run a scheduled action")
  public Object getSchedule() {
    return schedule;
  }

  public void setSchedule(Object schedule) {
    this.schedule = schedule;
  }

  public StopInstancesApiRequestSchema ownerIdN(List<String> ownerIdN) {
    this.ownerIdN = ownerIdN;
    return this;
  }

  public StopInstancesApiRequestSchema addOwnerIdNItem(String ownerIdNItem) {
    if (this.ownerIdN == null) {
      this.ownerIdN = new ArrayList<>();
    }
    this.ownerIdN.add(ownerIdNItem);
    return this;
  }

   /**
   * account ID of the instance owner
   * @return ownerIdN
  **/
  @ApiModelProperty(value = "account ID of the instance owner")
  public List<String> getOwnerIdN() {
    return ownerIdN;
  }

  public void setOwnerIdN(List<String> ownerIdN) {
    this.ownerIdN = ownerIdN;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopInstancesApiRequestSchema stopInstancesApiRequestSchema = (StopInstancesApiRequestSchema) o;
    return Objects.equals(this.force, stopInstancesApiRequestSchema.force) &&
        Objects.equals(this.hibernate, stopInstancesApiRequestSchema.hibernate) &&
        Objects.equals(this.instanceIdDotN, stopInstancesApiRequestSchema.instanceIdDotN) &&
        Objects.equals(this.schedule, stopInstancesApiRequestSchema.schedule) &&
        Objects.equals(this.ownerIdN, stopInstancesApiRequestSchema.ownerIdN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(force, hibernate, instanceIdDotN, schedule, ownerIdN);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopInstancesApiRequestSchema {\n");
    
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    hibernate: ").append(toIndentedString(hibernate)).append("\n");
    sb.append("    instanceIdDotN: ").append(toIndentedString(instanceIdDotN)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    ownerIdN: ").append(toIndentedString(ownerIdN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

