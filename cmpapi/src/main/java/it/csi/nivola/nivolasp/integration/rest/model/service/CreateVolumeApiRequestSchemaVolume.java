/*-
 * ========================LICENSE_START=================================
 * Api CMP
 * %%
 * Copyright (C) 2022 CSI Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2022 | CSI Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * Beehive API
 * Beehive API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nivola.engineering@csi.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.nivola.nivolasp.integration.rest.model.service;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * CreateVolumeApiRequestSchemaVolume
 */

public class CreateVolumeApiRequestSchemaVolume {
  @JsonProperty("AvailabilityZone")
  private String availabilityZone = null;

  @JsonProperty("Encrypted")
  private Boolean encrypted = false;

  @JsonProperty("Iops")
  private Integer iops = null;

  @JsonProperty("MultiAttachEnabled")
  private Boolean multiAttachEnabled = false;

  /**
   * hypervisor type
   */
  public enum NvlHypervisorEnum {
    OPENSTACK("openstack"),
    
    VSPHERE("vsphere");

    private String value;

    NvlHypervisorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NvlHypervisorEnum fromValue(String value) {
      for (NvlHypervisorEnum b : NvlHypervisorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("Nvl_Hypervisor")
  private NvlHypervisorEnum nvlHypervisor = NvlHypervisorEnum.OPENSTACK;

  @JsonProperty("Nvl_Name")
  private String nvlName = null;

  @JsonProperty("Size")
  private Integer size = null;

  @JsonProperty("SnapshotId")
  private String snapshotId = null;

  @JsonProperty("VolumeType")
  private String volumeType = null;

  @JsonProperty("owner-id")
  private String ownerId = null;

  public CreateVolumeApiRequestSchemaVolume availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

   /**
   * The Availability Zone in which to create the volume
   * @return availabilityZone
  **/
  @ApiModelProperty(example = "Pod1", required = true, value = "The Availability Zone in which to create the volume")
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }

  public CreateVolumeApiRequestSchemaVolume encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

   /**
   * Specifies whether the volume should be encrypted
   * @return encrypted
  **/
  @ApiModelProperty(example = "true", value = "Specifies whether the volume should be encrypted")
  public Boolean isEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }

  public CreateVolumeApiRequestSchemaVolume iops(Integer iops) {
    this.iops = iops;
    return this;
  }

   /**
   * The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of xx IOPS/GiB
   * @return iops
  **/
  @ApiModelProperty(example = "1000", value = "The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of xx IOPS/GiB")
  public Integer getIops() {
    return iops;
  }

  public void setIops(Integer iops) {
    this.iops = iops;
  }

  public CreateVolumeApiRequestSchemaVolume multiAttachEnabled(Boolean multiAttachEnabled) {
    this.multiAttachEnabled = multiAttachEnabled;
    return this;
  }

   /**
   * Specifies whether to enable volume Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to xx instances in the same Availability Zone
   * @return multiAttachEnabled
  **/
  @ApiModelProperty(example = "true", value = "Specifies whether to enable volume Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to xx instances in the same Availability Zone")
  public Boolean isMultiAttachEnabled() {
    return multiAttachEnabled;
  }

  public void setMultiAttachEnabled(Boolean multiAttachEnabled) {
    this.multiAttachEnabled = multiAttachEnabled;
  }

  public CreateVolumeApiRequestSchemaVolume nvlHypervisor(NvlHypervisorEnum nvlHypervisor) {
    this.nvlHypervisor = nvlHypervisor;
    return this;
  }

   /**
   * hypervisor type
   * @return nvlHypervisor
  **/
  @ApiModelProperty(example = "openstack", value = "hypervisor type")
  public NvlHypervisorEnum getNvlHypervisor() {
    return nvlHypervisor;
  }

  public void setNvlHypervisor(NvlHypervisorEnum nvlHypervisor) {
    this.nvlHypervisor = nvlHypervisor;
  }

  public CreateVolumeApiRequestSchemaVolume nvlName(String nvlName) {
    this.nvlName = nvlName;
    return this;
  }

   /**
   * volume name
   * @return nvlName
  **/
  @ApiModelProperty(example = "test", value = "volume name")
  public String getNvlName() {
    return nvlName;
  }

  public void setNvlName(String nvlName) {
    this.nvlName = nvlName;
  }

  public CreateVolumeApiRequestSchemaVolume size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * The size of the volume, in GiBs
   * @return size
  **/
  @ApiModelProperty(example = "10", required = true, value = "The size of the volume, in GiBs")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public CreateVolumeApiRequestSchemaVolume snapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

   /**
   * The snapshot from which to create the volume. You must specify either a snapshot ID
   * @return snapshotId
  **/
  @ApiModelProperty(example = "123", value = "The snapshot from which to create the volume. You must specify either a snapshot ID")
  public String getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
  }

  public CreateVolumeApiRequestSchemaVolume volumeType(String volumeType) {
    this.volumeType = volumeType;
    return this;
  }

   /**
   * The volume type
   * @return volumeType
  **/
  @ApiModelProperty(example = "vol.default", required = true, value = "The volume type")
  public String getVolumeType() {
    return volumeType;
  }

  public void setVolumeType(String volumeType) {
    this.volumeType = volumeType;
  }

  public CreateVolumeApiRequestSchemaVolume ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

   /**
   * account id or uuid associated to compute zone
   * @return ownerId
  **/
  @ApiModelProperty(example = "1", required = true, value = "account id or uuid associated to compute zone")
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVolumeApiRequestSchemaVolume createVolumeApiRequestSchemaVolume = (CreateVolumeApiRequestSchemaVolume) o;
    return Objects.equals(this.availabilityZone, createVolumeApiRequestSchemaVolume.availabilityZone) &&
        Objects.equals(this.encrypted, createVolumeApiRequestSchemaVolume.encrypted) &&
        Objects.equals(this.iops, createVolumeApiRequestSchemaVolume.iops) &&
        Objects.equals(this.multiAttachEnabled, createVolumeApiRequestSchemaVolume.multiAttachEnabled) &&
        Objects.equals(this.nvlHypervisor, createVolumeApiRequestSchemaVolume.nvlHypervisor) &&
        Objects.equals(this.nvlName, createVolumeApiRequestSchemaVolume.nvlName) &&
        Objects.equals(this.size, createVolumeApiRequestSchemaVolume.size) &&
        Objects.equals(this.snapshotId, createVolumeApiRequestSchemaVolume.snapshotId) &&
        Objects.equals(this.volumeType, createVolumeApiRequestSchemaVolume.volumeType) &&
        Objects.equals(this.ownerId, createVolumeApiRequestSchemaVolume.ownerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZone, encrypted, iops, multiAttachEnabled, nvlHypervisor, nvlName, size, snapshotId, volumeType, ownerId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVolumeApiRequestSchemaVolume {\n");
    
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    iops: ").append(toIndentedString(iops)).append("\n");
    sb.append("    multiAttachEnabled: ").append(toIndentedString(multiAttachEnabled)).append("\n");
    sb.append("    nvlHypervisor: ").append(toIndentedString(nvlHypervisor)).append("\n");
    sb.append("    nvlName: ").append(toIndentedString(nvlName)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

