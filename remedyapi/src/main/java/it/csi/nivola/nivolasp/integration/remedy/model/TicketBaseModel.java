/*-
 * ========================LICENSE_START=================================
 * Api Remedy
 * %%
 * Copyright (C) 2022 Regione Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2022 | Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * troubleticketing
 * Le API consentono interoperabilit� con il sistema di Trouble Ticketing (creazione ticket, anagrafiche clienti ed info lavoro) ed interrogazione informazioni (stato ticket, elenco ticket il cui stato � stato variato, elenco company cliente, elenco categorizzazioni operative, catalogo applicativo, configuration items, anagrafiche clienti).  
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.nivola.nivolasp.integration.remedy.model;

import java.time.OffsetDateTime;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * TicketBaseModel
 */

public class TicketBaseModel {
  @JsonProperty("ticketId")
  private String ticketId = null;

  @JsonProperty("insertDate")
  private OffsetDateTime insertDate = null;

  @JsonProperty("riepilogo")
  private String riepilogo = null;

  @JsonProperty("dettaglio")
  private String dettaglio = null;

  /**
   * grado di influenza della service request sui sistemi
   */
  public enum ImpattoEnum {
    VASTO_DIFFUSO("Vasto/Diffuso"),
    
    SIGNIFICATIVO_GRANDE("Significativo/Grande"),
    
    MODERATO_LIMITATO("Moderato/Limitato"),
    
    MINIMO_LOCALIZZATO("Minimo/Localizzato");

    private String value;

    ImpattoEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ImpattoEnum fromValue(String text) {
      for (ImpattoEnum b : ImpattoEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("impatto")
  private ImpattoEnum impatto = null;

  /**
   * grado di necessit� dell&#39;intervento di risposta
   */
  public enum UrgenzaEnum {
    CRITICA("Critica"),
    
    ALTA("Alta"),
    
    MEDIA("Media"),
    
    BASSA("Bassa");

    private String value;

    UrgenzaEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UrgenzaEnum fromValue(String text) {
      for (UrgenzaEnum b : UrgenzaEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("urgenza")
  private UrgenzaEnum urgenza = null;

  /**
   * tipologia di ticket
   */
  public enum TipologiaEnum {
    RIPRISTINO_DI_SERVIZIO_UTENTE("Ripristino di servizio utente"),
    
    RIPRISTINO_DI_SERVIZIO_INFRASTRUTTURALE("Ripristino di servizio infrastrutturale"),
    
    RICHIESTA_UTENTE("Richiesta utente"),
    
    EVENTO_INFRASTRUTTURALE("Evento infrastrutturale");

    private String value;

    TipologiaEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TipologiaEnum fromValue(String text) {
      for (TipologiaEnum b : TipologiaEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("tipologia")
  private TipologiaEnum tipologia = null;

  @JsonProperty("richiedente")
  private RichiedenteTicket richiedente = null;

  @JsonProperty("categorizzazione")
  private CategorizzazioneTicket categorizzazione = null;

  @JsonProperty("lavorazione")
  private LavorazioneTicket lavorazione = null;

  public TicketBaseModel ticketId(String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

   /**
   * identificativo della service request in formato &#x60;INCxxxxxxxxxxxx&#x60;
   * @return ticketId
  **/
  @ApiModelProperty(value = "identificativo della service request in formato `INCxxxxxxxxxxxx`")
  public String getTicketId() {
    return ticketId;
  }

  public void setTicketId(String ticketId) {
    this.ticketId = ticketId;
  }

  public TicketBaseModel insertDate(OffsetDateTime insertDate) {
    this.insertDate = insertDate;
    return this;
  }

   /**
   * data di inserimento della service request
   * @return insertDate
  **/
  @ApiModelProperty(value = "data di inserimento della service request")
  public OffsetDateTime getInsertDate() {
    return insertDate;
  }

  public void setInsertDate(OffsetDateTime insertDate) {
    this.insertDate = insertDate;
  }

  public TicketBaseModel riepilogo(String riepilogo) {
    this.riepilogo = riepilogo;
    return this;
  }

   /**
   * descrizione breve della service request
   * @return riepilogo
  **/
  @ApiModelProperty(value = "descrizione breve della service request")
  public String getRiepilogo() {
    return riepilogo;
  }

  public void setRiepilogo(String riepilogo) {
    this.riepilogo = riepilogo;
  }

  public TicketBaseModel dettaglio(String dettaglio) {
    this.dettaglio = dettaglio;
    return this;
  }

   /**
   * descrizione estesa della service request
   * @return dettaglio
  **/
  @ApiModelProperty(value = "descrizione estesa della service request")
  public String getDettaglio() {
    return dettaglio;
  }

  public void setDettaglio(String dettaglio) {
    this.dettaglio = dettaglio;
  }

  public TicketBaseModel impatto(ImpattoEnum impatto) {
    this.impatto = impatto;
    return this;
  }

   /**
   * grado di influenza della service request sui sistemi
   * @return impatto
  **/
  @ApiModelProperty(value = "grado di influenza della service request sui sistemi")
  public ImpattoEnum getImpatto() {
    return impatto;
  }

  public void setImpatto(ImpattoEnum impatto) {
    this.impatto = impatto;
  }

  public TicketBaseModel urgenza(UrgenzaEnum urgenza) {
    this.urgenza = urgenza;
    return this;
  }

   /**
   * grado di necessit� dell&#39;intervento di risposta
   * @return urgenza
  **/
  @ApiModelProperty(value = "grado di necessit� dell'intervento di risposta")
  public UrgenzaEnum getUrgenza() {
    return urgenza;
  }

  public void setUrgenza(UrgenzaEnum urgenza) {
    this.urgenza = urgenza;
  }

  public TicketBaseModel tipologia(TipologiaEnum tipologia) {
    this.tipologia = tipologia;
    return this;
  }

   /**
   * tipologia di ticket
   * @return tipologia
  **/
  @ApiModelProperty(value = "tipologia di ticket")
  public TipologiaEnum getTipologia() {
    return tipologia;
  }

  public void setTipologia(TipologiaEnum tipologia) {
    this.tipologia = tipologia;
  }

  public TicketBaseModel richiedente(RichiedenteTicket richiedente) {
    this.richiedente = richiedente;
    return this;
  }

   /**
   * Get richiedente
   * @return richiedente
  **/
  @ApiModelProperty(value = "")
  public RichiedenteTicket getRichiedente() {
    return richiedente;
  }

  public void setRichiedente(RichiedenteTicket richiedente) {
    this.richiedente = richiedente;
  }

  public TicketBaseModel categorizzazione(CategorizzazioneTicket categorizzazione) {
    this.categorizzazione = categorizzazione;
    return this;
  }

   /**
   * Get categorizzazione
   * @return categorizzazione
  **/
  @ApiModelProperty(value = "")
  public CategorizzazioneTicket getCategorizzazione() {
    return categorizzazione;
  }

  public void setCategorizzazione(CategorizzazioneTicket categorizzazione) {
    this.categorizzazione = categorizzazione;
  }

  public TicketBaseModel lavorazione(LavorazioneTicket lavorazione) {
    this.lavorazione = lavorazione;
    return this;
  }

   /**
   * Get lavorazione
   * @return lavorazione
  **/
  @ApiModelProperty(value = "")
  public LavorazioneTicket getLavorazione() {
    return lavorazione;
  }

  public void setLavorazione(LavorazioneTicket lavorazione) {
    this.lavorazione = lavorazione;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketBaseModel ticketBaseModel = (TicketBaseModel) o;
    return Objects.equals(this.ticketId, ticketBaseModel.ticketId) &&
        Objects.equals(this.insertDate, ticketBaseModel.insertDate) &&
        Objects.equals(this.riepilogo, ticketBaseModel.riepilogo) &&
        Objects.equals(this.dettaglio, ticketBaseModel.dettaglio) &&
        Objects.equals(this.impatto, ticketBaseModel.impatto) &&
        Objects.equals(this.urgenza, ticketBaseModel.urgenza) &&
        Objects.equals(this.tipologia, ticketBaseModel.tipologia) &&
        Objects.equals(this.richiedente, ticketBaseModel.richiedente) &&
        Objects.equals(this.categorizzazione, ticketBaseModel.categorizzazione) &&
        Objects.equals(this.lavorazione, ticketBaseModel.lavorazione);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticketId, insertDate, riepilogo, dettaglio, impatto, urgenza, tipologia, richiedente, categorizzazione, lavorazione);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketBaseModel {\n");
    
    sb.append("    ticketId: ").append(toIndentedString(ticketId)).append("\n");
    sb.append("    insertDate: ").append(toIndentedString(insertDate)).append("\n");
    sb.append("    riepilogo: ").append(toIndentedString(riepilogo)).append("\n");
    sb.append("    dettaglio: ").append(toIndentedString(dettaglio)).append("\n");
    sb.append("    impatto: ").append(toIndentedString(impatto)).append("\n");
    sb.append("    urgenza: ").append(toIndentedString(urgenza)).append("\n");
    sb.append("    tipologia: ").append(toIndentedString(tipologia)).append("\n");
    sb.append("    richiedente: ").append(toIndentedString(richiedente)).append("\n");
    sb.append("    categorizzazione: ").append(toIndentedString(categorizzazione)).append("\n");
    sb.append("    lavorazione: ").append(toIndentedString(lavorazione)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

