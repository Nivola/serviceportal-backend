/*-
 * ========================LICENSE_START=================================
 * Api Remedy
 * %%
 * Copyright (C) 2022 Regione Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2022 | Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * troubleticketing
 * Le API consentono interoperabilita' con il sistema di Trouble Ticketing (creazione ticket, anagrafiche clienti ed info lavoro) ed interrogazione informazioni 
 * (stato ticket, elenco ticket il cui stato variato, elenco company cliente, elenco categorizzazioni operative, catalogo applicativo, configuration items, anagrafiche clienti).  
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.csi.nivola.nivolasp.integration.remedy.usati;

import java.io.File;
import java.util.List;
import java.util.UUID;

import org.junit.Ignore;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import it.csi.nivola.nivolasp.integration.remedy.model.CategoriaOperativaBaseModel;
import it.csi.nivola.nivolasp.integration.remedy.model.CategoriaOperativaBaseModel.TipologiaEnum;
import it.csi.nivola.nivolasp.integration.remedy.model.CategoriaOperativaTicket;
import it.csi.nivola.nivolasp.integration.remedy.model.CategorizzazioneTicket;
import it.csi.nivola.nivolasp.integration.remedy.model.Ente;
import it.csi.nivola.nivolasp.integration.remedy.model.InfoNotaAttachments;
import it.csi.nivola.nivolasp.integration.remedy.model.InfoNotaWLog;
import it.csi.nivola.nivolasp.integration.remedy.model.LavorazioneTicket;
import it.csi.nivola.nivolasp.integration.remedy.model.RichiedenteDaAnagrafica;
import it.csi.nivola.nivolasp.integration.remedy.model.RichiedentePerAnagrafica;
import it.csi.nivola.nivolasp.integration.remedy.model.RichiedenteTicket;
import it.csi.nivola.nivolasp.integration.remedy.model.Ticket;
import it.csi.nivola.nivolasp.integration.remedy.model.Ticket.ImpattoEnum;
import it.csi.nivola.nivolasp.integration.remedy.model.Ticket.UrgenzaEnum;
import it.csi.nivola.nivolasp.integration.remedy.model.TicketExpo;
import it.csi.nivola.nivolasp.integration.remedy.model.TicketSnapshot;
import it.csi.nivola.nivolasp.integration.remedy.service.AbstractTest;
import it.csi.nivola.nivolasp.integration.remedy.service.CategoriaApi;
import it.csi.nivola.nivolasp.integration.remedy.service.EnteApi;
import it.csi.nivola.nivolasp.integration.remedy.service.LavorazioneApi;
import it.csi.nivola.nivolasp.integration.remedy.service.RichiedenteApi;
import it.csi.nivola.nivolasp.integration.remedy.service.TicketApi;

/**
 * Classe per il test delle api di Remedy descritte nel CDU, elenco delle api
 * che servono alla gestione delle segnaalzioni su Nivola - Service portal.
 * 
 * ATTENZIONE! Il commento dei metodi corrisponde alla sezione "Interfacce con
 * altri sistemi" dell'analisi
 * 
 */
public class ApiIntegratePerNivolaTest extends AbstractTest {
	@Autowired
	public EnteApi enteApi;
	@Autowired
	public RichiedenteApi richiedenteApi;
	@Autowired
	public TicketApi ticketApi;
	@Autowired
	public CategoriaApi categoriaApi;
	@Autowired
	public LavorazioneApi lavorazioneApi;

	@Test
	public void testBatchVerificaTriplette () {
		//ottengo l'utente
		String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
//        String personId = "PPL000000758674";
        String personId = "38429282"; //ezio cmdbuild
        RichiedenteDaAnagrafica response = richiedenteApi.getUser(xRequestID, xForwardedFor, personId);
        log.debug("\n"+response);
        //prendo response -> company -> companyName e lo uso per cercare le triplette
        xRequestID = UUID.randomUUID().toString();
		xForwardedFor = "127.0.0.1";
		String filter = "{ "
				+ "\"ente\": {\"eq\": \""+response.getCompany().getCompanyName()+"\"}, "
				+ "\"livello1\": {\"eq\": \"1L - Gestione Nivola\"} "
				+ "}";
		log.debug("FILTER:" + filter);
		String sort = null;
		Integer offset = null;
		Integer limit = 400;
		List<CategoriaOperativaTicket> responseCategorie = categoriaApi.getOpCategoriesList(xRequestID, xForwardedFor, filter, sort, offset, limit);
		log.debug("" + responseCategorie.size());
		log.debug("\n" + responseCategorie);
        


	}
	
	
	/**
	 * Anagrafica utenti /users
	 */
	@Test
	public void getUtenteEmailTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = "{ \"email\": {\"eq\": \"ezio.raymondi@csi.it\"} }";
		String sort = null;
		Integer offset = null;
		Integer limit = 100;
		List<RichiedenteDaAnagrafica> response = richiedenteApi.getUserList(xRequestID, xForwardedFor, filter, sort, offset, limit);

		log.debug("\n" + response);
	}
	
	
	/**
	 * Interrogazione stato ticket /tickets/{ticketId}/stato
	 */
	@Test
	public void getWorkinfoTicketTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String ticketId = "2022-IM000608";
		LavorazioneTicket response = ticketApi.getWorkinfoTicket(xRequestID, xForwardedFor, ticketId);

		log.debug("\n" + response);
	}

	
	/**
	 * Consulta le informazini allegate alla service request
	 * /tickets/{ticketId}/stato/info-dettagli/
	 */
	@Test
	public void getWorklogsTicketTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String ticketId = "2022-IM000608";// "INC000003289559";
		String filter = null;
		String sort = null;
		Integer offset = null;
		Integer limit = null;
		List<InfoNotaAttachments> response = ticketApi.getWorklogsTicket(xRequestID, xForwardedFor, ticketId, filter, sort, offset, limit);

		log.debug("\n" + response);
	}

	
	/**
	 * Consulta una specifica info nota allegata alla service request
	 * /tickets/{ticketId}/stato/info-dettagli/{logId}
	 */
	@Test
	public void getWorklogTicketTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String ticketId = "INC000003289559";
		String logId = "WLG000001392664";
		InfoNotaAttachments response = ticketApi.getWorklogTicket(xRequestID, xForwardedFor, ticketId, logId);

		log.debug("\n" + response);
	}

	
	/**
	 * Insert info lavoro
	 */
	@Test
	public void addWorkinfoTicketTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String ticketId = "INC000003289559";
		String riepilogo = "ins api";
		String tipologia = "General";
		String note = "Inserimento API";
		String nomeAllegato1 = null;
		File customKey = null;
		InfoNotaWLog response = ticketApi.addWorkinfoTicket(xRequestID, xForwardedFor, ticketId, riepilogo, tipologia, note, nomeAllegato1, customKey);
		// WLG000001392665
		log.debug("\n" + response);
	}

	
	/**
	 * Insert ticket OK sia con PPL dato da Remedy che col mio
	 */
	@Test
	public void createTicketTest() {

		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";

		Ticket ticket = new Ticket();

		CategorizzazioneTicket categorizzazione = new CategorizzazioneTicket();

		CategoriaOperativaBaseModel categoriaOperativa = new CategoriaOperativaBaseModel();
		categoriaOperativa.setLivello1("1L - Gestione Nivola");
		categoriaOperativa.setLivello2("Altri mdw");
		categoriaOperativa.setLivello3("Variazione configurazione");
		categoriaOperativa.setTipologia(TipologiaEnum.EVENTO_INFRASTRUTTURALE);

		categorizzazione.setCategoriaOperativa(categoriaOperativa);

		ticket.setCategorizzazione(categorizzazione);
		ticket.setDettaglio(
				"Account: account_csi\\nDivisione: DivCsi\\naccount: c31b70a7-0204-400c-b902-7d369d7b0ff6\\nDescrizione: descrizionecreaAbilitazioneDiRete\\n\\nIP Host From: 127.0.0.1\\nIP Host TO: 192.168.1.1\\nPorta: 8080\\n\",\n" + ""
						+ System.currentTimeMillis());
		ticket.setImpatto(ImpattoEnum.VASTO_DIFFUSO);
		RichiedenteTicket richiedente = new RichiedenteTicket();
		richiedente.setPersonId("38429282");//ezio cmdbuild
//		richiedente.setPersonId("PPL000000420254");//andrea
//		richiedente.setPersonId("PPL000000420254");//andrea
//		richiedente.setPersonId("PPL000000018664");//ezio come Regione Piemonte
//		richiedente.setPersonId("PPL000000296787");//ezio come Regione Piemonte OPERTIVO
		ticket.setRichiedente(richiedente);
		ticket.setUrgenza(UrgenzaEnum.BASSA);

		ticket.setRiepilogo("oggettocreaAbilitazioneDiRete" + System.currentTimeMillis());
		ticket.setTipologia(it.csi.nivola.nivolasp.integration.remedy.model.Ticket.TipologiaEnum.RIPRISTINO_DI_SERVIZIO_UTENTE);

		Ticket response = ticketApi.createTicket(xRequestID, xForwardedFor, ticket);

		log.debug("\n" + response);
	}
	


	/**
	 * Specifico ente per companyId /enti
	 */
	@Test
	public void getEntePerCompanyIdTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = "{ \"companyId\": {\"eq\":\"CPY000000014451\"} }";
		log.debug("FILTER:" + filter);
		String sort = null;
		Integer offset = null;
		Integer limit = null;
		List<Ente> response = enteApi.getCompanyList(xRequestID, xForwardedFor, filter, sort, offset, limit);

		log.debug("\n" + response);
	}

	/**
	 * Interrogazione categorie operative con filtro null /categorie-operative
	 */
	@Test
	public void getCategorieOperativeNonFiltrateTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = null;
		log.debug("FILTER:" + filter);
		String sort = null;
		Integer offset = null;
		Integer limit = 400;
		List<CategoriaOperativaTicket> response = categoriaApi.getOpCategoriesList(xRequestID, xForwardedFor, filter, sort, offset, limit);
		log.debug("" + response.size());
		log.debug("\n" + response);
	}

	/**
	 * Interrogazione categorie operative /categorie-operative
	 */
	@Test
	public void getCategorieOperativePerEnteCsiTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = "{ \"ente\": {\"eq\": \"Regione Piemonte\"} }";
		log.debug("FILTER:" + filter);
		String sort = null;
		Integer offset = null;
		Integer limit = 400;
		List<CategoriaOperativaTicket> response = categoriaApi.getOpCategoriesList(xRequestID, xForwardedFor, filter, sort, offset, limit);
		log.debug("" + response.size());
		log.debug("\n" + response);
	}

	/**
	 * Interrogazione categorie operative per livwello 1 = Gestione Nivola
	 * /categorie-operative
	 */
	@Test
	public void getCategorieOperativePerLivello1NivolaCsiTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = "{ \"livello1\": {\"eq\": \"1L - Gestione Nivola\" }, \"ente\": {\"eq\": \"Regione Piemonte\"} }";
		log.debug("FILTER:" + filter);
		String sort = null;
		Integer offset = null;
		Integer limit = 400;
		List<CategoriaOperativaTicket> response = categoriaApi.getOpCategoriesList(xRequestID, xForwardedFor, filter, sort, offset, limit);
		log.debug("" + response.size());
		log.debug("\n" + response);
	}

	/*
	 * Chiama l'elenco degli utenti per prelevare il primo disponibile per
	 * l'utilizzo nei test che richiedono la valorizzazione di un utente.
	 * 
	 * @return
	 */
	public RichiedenteDaAnagrafica recuperaPrimoUtenteDisponibile() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = null;
		String sort = null;
		Integer offset = null;
		Integer limit = null;
		List<RichiedenteDaAnagrafica> response = richiedenteApi.getUserList(xRequestID, xForwardedFor, filter, sort, offset, limit);
		return response.get(0);
	}

	/*
	 * Chiama l'elenco delle categorie operative per reperire la prima categoria
	 * trovata ed usarla per popolare i campi livello1 livello2 livello3 ente
	 * 
	 * @return
	 */
	public CategoriaOperativaTicket recuperaPrimaCategoriaOperativaDisponibile() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = null;
		String sort = null;
		Integer offset = null;
		Integer limit = null;
		List<CategoriaOperativaTicket> response = categoriaApi.getOpCategoriesList(xRequestID, xForwardedFor, filter, sort, offset, limit);

		return response.get(0);
	}

	/**
	 * Elenco completo utenti /users
	 */
	@Test
	@Ignore
	public void getUtentiTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = null;
		String sort = null;
		Integer offset = null;
		Integer limit = 100;
		List<RichiedenteDaAnagrafica> response = richiedenteApi.getUserList(xRequestID, xForwardedFor, filter, sort, offset, limit);

		log.debug("\n" + response);
	}

	/**
	 * Anagrafica enti /enti
	 */
	@Test
	@Ignore
	public void getEntiCompanyListTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = null;// "{ \"companyId\": {\"eq\":\"CPY000000014451\"} }";
		log.debug("FILTER:" + filter);
		String sort = null;
		Integer offset = null;
		Integer limit = null;
		List<Ente> response = enteApi.getCompanyList(xRequestID, xForwardedFor, filter, sort, offset, limit);
		log.debug("" + response.size());
		log.debug("\n" + response);
		assert response.size() > 1;
	}

	/**
	 * Aggiunta di un utente per autoaccreditamento
	 */
	@Test
	@Ignore
	public void addUserTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		RichiedentePerAnagrafica richiedente = new RichiedentePerAnagrafica();
		// richiedente.se
		List<RichiedenteDaAnagrafica> response = richiedenteApi.addUser(xRequestID, xForwardedFor, richiedente);

		log.debug("\n" + response);
	}

	/**
	 * Interrogazione ticket che hanno mutato stato nelle ultime x ore
	 * /tickets/monitoraggio
	 */
	@Test
	public void getTicketMonitoraggioTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = "{ \"submitDate\": {\"gte\":\"2019-12-03T11:56:18Z\"} }";
		String sort = null;
		Integer offset = null;
		Integer limit = null;
		List<TicketSnapshot> response = lavorazioneApi.getLastUpdated(xRequestID, xForwardedFor, filter, sort, offset, limit);

		log.debug("\n" + response);
	}

	/**
	 * ritorna gli ultimi ticket registrati a sistema con categorizzazione da qualsiasi fonte
	 *
	 * ritorna i ticket registrati negli ultimi 10 gg a sistema con categorizzazione da qualsiasi fonte
	 * 
	 * USATO SOLO PER AVERE QUALCHE TICKET DA RIUTILIZZARE NEI CDU PER TEST
	 */
	@Test
	public void getLastRegisteredTest() {
		String xRequestID = UUID.randomUUID().toString();
		String xForwardedFor = "127.0.0.1";
		String filter = null;
		String sort = null;
		Integer offset = null;
		Integer limit = 100;
		List<TicketExpo> response = ticketApi.getLastRegistered(xRequestID, xForwardedFor, filter, sort, offset, limit);

		log.debug("\n" + response);
	}
}
