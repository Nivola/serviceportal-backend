/*-
 * ========================LICENSE_START=================================
 * Api Remedy
 * %%
 * Copyright (C) 2022 Regione Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2022 | Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * troubleticketing
 * Le API consentono interoperabilit� con il sistema di Trouble Ticketing (creazione ticket, anagrafiche clienti ed info lavoro) ed interrogazione informazioni (stato ticket, elenco ticket il cui stato � stato variato, elenco company cliente, elenco categorizzazioni operative, catalogo applicativo, configuration items, anagrafiche clienti).  
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.nivola.nivolasp.integration.remedy.service;

import java.io.File;
import java.util.List;
import java.util.UUID;

import org.junit.Ignore;
import org.junit.Test;

import it.csi.nivola.nivolasp.integration.remedy.model.InfoNotaAttachments;
import it.csi.nivola.nivolasp.integration.remedy.model.InfoNotaWLog;
import it.csi.nivola.nivolasp.integration.remedy.model.LavorazioneTicket;
import it.csi.nivola.nivolasp.integration.remedy.model.TicketExpo;
import it.csi.nivola.nivolasp.integration.remedy.model.TicketSnapshot;

/**
 * API tests for LavorazioneApi
 */
@Ignore
public class LavorazioneApiTest  extends AbstractTest{

    private final LavorazioneApi api = new LavorazioneApi();

    
    /**
     * aggiorna le informazioni allegate alla service request
     *
     * Aggioramento delle informazioni richieste al richiedente per la lavorazione della service request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWorkinfoTicketTest() {
        String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
        String ticketId = null;
        String riepilogo = null;
        String tipologia = null;
        String note = null;
        String nomeAllegato1 = null;
        File customKey = null;
        InfoNotaWLog response = api.addWorkinfoTicket(xRequestID, xForwardedFor, ticketId, riepilogo, tipologia, note, nomeAllegato1, customKey);

        log.debug("\n"+response);
    }
    
    /**
     * restituisce un allegato associato alla info nota di una service request
     *
     * Consultazione delle informazioni allegate dal richiedente per la lavorazione della service request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentTest() {
        String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
        String ticketId = null;
        String logId = null;
        Integer attachId = null;
        File response = api.getAttachment(xRequestID, xForwardedFor, ticketId, logId, attachId);

        log.debug("\n"+response);
    }
    
    /**
     * ritorna gli ultimi ticket registrati a sistema con categorizzazione &#39;1L -&#39; da qualsiasi fonte
     *
     * ritorna i ticket registrati negli ultimi 10 gg a sistema con categorizzazione &#39;1L -&#39; da qualsiasi fonte
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLastRegisteredTest() {
        String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
        String filter = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        List<TicketExpo> response = api.getLastRegistered(xRequestID, xForwardedFor, filter, sort, offset, limit);

        log.debug("\n"+response);
    }
    
    /**
     * ritorna gli ultimi ticket modificati
     *
     * Ritorna le service request che siano state modificate entro x ore dall&#39;ultimo controllo
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLastUpdatedTest() {
        String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
        String filter = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        List<TicketSnapshot> response = api.getLastUpdated(xRequestID, xForwardedFor, filter, sort, offset, limit);

        log.debug("\n"+response);
    }
    
    /**
     * ritorna le informazioni sulla lavorazione della service request
     *
     * Ritorna le info lavorazione della service request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkinfoTicketTest() {
        String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
        String ticketId = null;
        LavorazioneTicket response = api.getWorkinfoTicket(xRequestID, xForwardedFor, ticketId);

        log.debug("\n"+response);
    }
    
    /**
     * consulta una specifica info nota allegata alla service request
     *
     * Consultazione delle informazioni allegate dal richiedente per la lavorazione della service request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorklogTicketTest() {
        String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
        String ticketId = null;
        String logId = null;
        InfoNotaAttachments response = api.getWorklogTicket(xRequestID, xForwardedFor, ticketId, logId);

        log.debug("\n"+response);
    }
    
    /**
     * consulta le informazioni allegate alla service request
     *
     * Consultazione delle informazioni allegate dal richiedente per la lavorazione della service request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorklogsTicketTest() {
        String xRequestID = UUID.randomUUID().toString();
        String xForwardedFor = "127.0.0.1";
        String ticketId = null;
        String filter = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        List<InfoNotaAttachments> response = api.getWorklogsTicket(xRequestID, xForwardedFor, ticketId, filter, sort, offset, limit);

        log.debug("\n"+response);
    }
    
}
